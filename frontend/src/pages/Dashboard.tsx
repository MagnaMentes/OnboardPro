import {
  Box,
  Button,
  Container,
  Flex,
  Grid,
  Heading,
  Text,
  VStack,
  Link,
  HStack,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
} from "@chakra-ui/react";
import { useEffect, useState } from "react";
import { gamificationApi, UserLevel, UserReward } from "../api/gamificationApi";
import LevelProgressBar from "../components/gamification/LevelProgressBar";
import RewardCard from "../components/gamification/RewardCard";
import { useNavigate, Link as RouterLink } from "react-router-dom";
import toast from "react-hot-toast";
import { FiBarChart2 } from "react-icons/fi";
import { useAuthStore } from "../store/authStore";

function Dashboard() {
  const [userLevel, setUserLevel] = useState<UserLevel | null>(null);
  const [userRewards, setUserRewards] = useState<UserReward[]>([]);
  const [gamificationLoading, setGamificationLoading] = useState(true);
  const [user, setUser] = useState<{ name: string; email: string } | null>(
    null
  );
  const navigate = useNavigate();

  const { user: authUser, isAuthenticated } = useAuthStore();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated || !authUser) {
      toast.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
      navigate("/login");
      return;
    }

    setUser({
      name: authUser.full_name,
      email: authUser.email,
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const fetchGamificationData = async () => {
      if (authUser) {
        try {
          setGamificationLoading(true);
          const levelData = await gamificationApi.getUserLevel();
          setUserLevel(levelData);
          const rewardsData = await gamificationApi.getUserRewards(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
          setUserRewards(rewardsData.slice(0, 3));
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
        } finally {
          setGamificationLoading(false);
        }
      }
    };

    if (isAuthenticated && authUser) {
      fetchGamificationData();
    }
  }, [navigate, authUser, isAuthenticated]);

  const { logout } = useAuthStore();

  const handleLogout = () => {
    logout();
    toast.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    navigate("/login");
  };

  if (!user) {
    return null;
  }

  return (
    <Box>
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <Flex
        as="nav"
        align="center"
        justify="space-between"
        wrap="wrap"
        padding={4}
        bg="blue.500"
        color="white"
      >
        <Flex align="center" mr={5}>
          <Heading as="h1" size="lg">
            OnboardPro
          </Heading>
        </Flex>

        <Flex align="center">
          <Text mr={4}>–ü—Ä–∏–≤–µ—Ç, {user.name}!</Text>

          {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <Box mr={4}>
            <Link
              as={RouterLink}
              to="/onboarding/progress"
              color="white"
              display="flex"
              alignItems="center"
            >
              <Box mr={2}>üìã</Box>
              –ú–æ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            </Link>
          </Box>

          {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <Box mr={4}>
            <Link
              as={RouterLink}
              to="/booking/meetings"
              color="white"
              display="flex"
              alignItems="center"
            >
              <Box mr={2}>üìÖ</Box>
              –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏
            </Link>
          </Box>

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è HR –∏ –∞–¥–º–∏–Ω–æ–≤ */}
          {authUser &&
            (authUser.role === "admin" || authUser.role === "hr") && (
              <>
                <Box mr={4}>
                  <Link
                    as={RouterLink}
                    to="/admin/analytics"
                    color="white"
                    display="flex"
                    alignItems="center"
                  >
                    <Box as={FiBarChart2} mr={2} />
                    BI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                  </Link>
                </Box>
                <Box mr={4}>
                  <Link
                    as={RouterLink}
                    to="/admin/booking/manage"
                    color="white"
                    display="flex"
                    alignItems="center"
                  >
                    <Box mr={2}>üìä</Box>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏
                  </Link>
                </Box>
              </>
            )}

          <Button onClick={handleLogout} colorScheme="whiteAlpha">
            –í—ã–π—Ç–∏
          </Button>
        </Flex>
      </Flex>

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      <Container maxW="container.xl" py={10}>
        <VStack spacing={8} align="stretch">
          <Heading as="h2" size="xl">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </Heading>

          <Text fontSize="lg">
            –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OnboardPro. –ó–¥–µ—Å—å –±—É–¥–µ—Ç
            —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
          </Text>

          <Grid
            templateColumns="repeat(auto-fill, minmax(300px, 1fr))"
            gap={6}
            mt={6}
          >
            {/* –ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <Box
              as={RouterLink}
              to="/onboarding/progress"
              p={5}
              shadow="md"
              borderWidth="1px"
              borderRadius="md"
              bg="white"
              cursor="pointer"
              _hover={{
                shadow: "lg",
                borderColor: "blue.400",
              }}
            >
              <Heading fontSize="xl">–ú–æ–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥-–ø–ª–∞–Ω</Heading>
              <Text mt={4}>
                –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å
                AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º Solomia.
              </Text>
              <Text color="blue.500" mt={2}>
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–µ–º—É –ø–ª–∞–Ω—É ‚Üí
              </Text>
            </Box>

            <Box
              p={5}
              shadow="md"
              borderWidth="1px"
              borderRadius="md"
              bg="white"
            >
              <Heading fontSize="xl">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã</Heading>
              <Text mt={4}>
                –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
              </Text>
            </Box>

            <Box
              p={5}
              shadow="md"
              borderWidth="1px"
              borderRadius="md"
              bg="white"
            >
              <Heading fontSize="xl">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</Heading>
              <Text mt={4}>
                –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π.
              </Text>
            </Box>
          </Grid>

          {/* –ë–ª–æ–∫ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
          <Box mt={10}>
            <Heading as="h3" size="lg" mb={4}>
              –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            </Heading>
            <Grid templateColumns={{ base: "1fr", md: "1fr 2fr" }} gap={6}>
              <VStack spacing={4} align="stretch">
                <LevelProgressBar
                  userLevel={userLevel}
                  isLoading={gamificationLoading}
                />
              </VStack>
              <VStack spacing={4} align="stretch">
                <Heading as="h4" size="md">
                  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
                </Heading>
                {gamificationLoading ? (
                  <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≥—Ä–∞–¥...</Text>
                ) : userRewards.length > 0 ? (
                  userRewards.map((reward) => (
                    <RewardCard key={reward.id} reward={reward} />
                  ))
                ) : (
                  <Text>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥.</Text>
                )}
                {userRewards.length > 0 && (
                  <Button
                    as={RouterLink}
                    to="/rewards"
                    colorScheme="blue"
                    alignSelf="flex-start"
                  >
                    –í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã
                  </Button>
                )}
              </VStack>
            </Grid>
          </Box>
        </VStack>
      </Container>
    </Box>
  );
}

export default Dashboard;
